<?php

namespace Modules\Listings\Http\Controllers;

use Illuminate\Contracts\Support\Renderable;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;
use Modules\Inspection\Entities\Inspection;
use Modules\Inspection\Entities\InspectionTaskMaintenanceDoc;
use Modules\Listings\Entities\AdvertGeneralFeatures;
use Modules\Listings\Entities\Listing;
use Modules\Listings\Entities\ListingAdvertisement;
use Modules\Listings\Entities\ListingAdvertVideoUrl;
use Modules\Listings\Entities\ListingPropertyDetails;
use Modules\Listings\Entities\OptionalProperties;
use Modules\Messages\Entities\MessageWithMail;
use Modules\Messages\Http\Controllers\ActivityMessageTriggerController;
use Modules\Properties\Entities\PropertyActivity;
use Modules\Properties\Entities\PropertyActivityEmail;
use Modules\Settings\Entities\SettingListingProvider;

class ListingsController extends Controller
{
    /**
     * Display a listing of the resource.
     * @return Renderable
     */
    public function index()
    {
        try {
            $settingListingProvider = SettingListingProvider::where('company_id', auth('api')->user()->company_id)->first();
            $listing = Listing::with('advertisement')->where('company_id', auth('api')->user()->company_id)->get();
            $draft = Listing::with('advertisement')->where('company_id', auth('api')->user()->company_id)->where('status', 'Draft')->get();
            $published = Listing::with('advertisement')->where('company_id', auth('api')->user()->company_id)->where('status', 'Published')->get();
            $leased = Listing::with('advertisement')->where('company_id', auth('api')->user()->company_id)->where('status', 'Leased')->get();

            return response()->json(['data' => $listing, 'draft' => ['data' => $draft], 'published' => ['data' => $published], 'leased' => ['data' => $leased], 'setting_listing_provider' => ['listing_provider' => $settingListingProvider], 'message' => 'Successfull'], 200);
        } catch (\Exception $ex) {
            return response()->json(["status" => false, "error" => ['error'], "message" => $ex->getMessage(), "data" => []]);
        }
    }

    /**
     * Show the form for creating a new resource.
     * @return Renderable
     */
    public function listingAuthtoken(Request $request)
    {
        try {

            $login = '3c0aa351-9829-44b7-b9a0-0ba26c856b94';
            $password = 'b476b67a-f9d2-4a21-affd-dfe1b146d454';
            // $url = 'https://api.realestate.com.au/oauth/token';
            // $ch = curl_init();
            // curl_setopt($ch, CURLOPT_URL, $url);
            // curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
            // curl_setopt($ch, CURLOPT_CUSTOMREQUEST, POST);
            // curl_setopt($ch, CURLOPT_RETURNTRANSFER, "1");
            // curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
            // curl_setopt($ch, CURLOPT_USERPWD, "$login:$password");
            // $result = curl_exec($ch);
            // curl_close($ch);
            // echo ($result);

            // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
            $login = '3c0aa351-9829-44b7-b9a0-0ba26c856b94';
            $password = 'b476b67a-f9d2-4a21-affd-dfe1b146d454';
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, 'https://api.realestate.com.au/oauth/token');
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_POST, 1);
            curl_setopt($ch, CURLOPT_POSTFIELDS, "grant_type=client_credentials");
            curl_setopt($ch, CURLOPT_USERPWD, "$login:$password");
            $headers = array();
            $headers[] = 'Content-Type: application/x-www-form-urlencoded';
            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
            $result = curl_exec($ch);

            if (curl_errno($ch)) {
                echo 'Error:' . curl_error($ch);
            }
            curl_close($ch);
            $access = json_decode($result);

            $token = $access->access_token;
            return "berearer " . $token;
        } catch (\Throwable $th) {
            return response()->json(["status" => false, "error" => ['error'], "message" => $th->getMessage(), "data" => []], 500);
        }


        // $username = "3c0aa351-9829-44b7-b9a0-0ba26c856b94";
        // $password = "b476b67a-f9d2-4a21-affd-dfe1b146d454";

        // $ch = curl_init();
        // curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/xml', 'grant_type:client_credentials'));
        // curl_setopt($ch, CURLOPT_HEADER, 1);
        // curl_setopt($ch, CURLOPT_USERPWD, $username . ":" . $password);
        // curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        // curl_setopt($ch, CURLOPT_POST, 1);
        // // curl_setopt($ch, CURLOPT_POSTFIELDS);
        // curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
        // $return = curl_exec($ch);
        // curl_close($ch);
        // return $return;

        // $curlHandler = curl_init();

        // $userName = "3c0aa351-9829-44b7-b9a0-0ba26c856b94";
        // $password = "b476b67a-f9d2-4a21-affd-dfe1b146d454";

        // curl_setopt_array($curlHandler, [
        //     CURLOPT_URL => "https://api.realestate.com.au/oauth/token",
        //     CURLOPT_RETURNTRANSFER => true,

        //     CURLOPT_HTTPAUTH => CURLAUTH_BASIC,
        //     CURLOPT_USERPWD => $userName . ':' . $password,
        // ]);

        // $response = curl_exec($curlHandler);
        // curl_close($curlHandler);
        // return $response;




        // curl_setopt_array($curl, array(
        //     CURLOPT_URL => "https://api.realestate.com.au/oauth/token",
        //     CURLOPT_RETURNTRANSFER => true,
        //     CURLOPT_ENCODING => "",
        //     CURLOPT_MAXREDIRS => 10,
        //     CURLOPT_TIMEOUT => 30000,
        //     CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        //     CURLOPT_CUSTOMREQUEST => "POST",
        //     // CURLOPT_POSTFIELDS => $body,
        //     CURLOPT_HTTPAUTH       => "CURLAUTH_BASIC",  // authentication method
        //     // authentication
        //     CURLOPT_HTTPHEADER => array(
        //         CURLOPT_USERPWD        => "3c0aa351-9829-44b7-b9a0-0ba26c856b94:b476b67a-f9d2-4a21-affd-dfe1b146d454",
        //     ),
        // ));
        // $response = curl_exec($curl);
        // $err = curl_error($curl);
        // curl_close($curl);

        // if ($err) {
        //     // echo "cURL Error #:" . $err;
        //     return $err;
        // } else {
        //     // print_r(json_decode($response));
        //     return $response;
        // }
    }

    /**
     * Store a newly created resource in storage.
     * @param Request $request
     * @return Renderable
     */
    public function store(Request $request)
    {
        try {
            $attributeNames = array(
                'property_id' => $request->property_id,
                'type' => $request->type,
                'company_id' => auth('api')->user()->company_id,
            );
            $validator = Validator::make($attributeNames, [
                'property_id' => 'required',
                'type' => 'required',
            ]);

            if ($validator->fails()) {
                return response()->json(array('errors' => $validator->getMessageBag()->toArray()), 422);
            } else {
                $listingId = null;
                DB::transaction(function () use ($attributeNames, $request, &$listingId) {
                    $listing = Listing::create($attributeNames);
                    $listingId = $listing->id;
                    $listingRental = new ListingAdvertisement();
                    $listingRental->listing_id = $listing->id;
                    $listingRental->listing_agent_primary = $request->listing_agent_primary;
                    $listingRental->listing_agent_secondary = $request->listing_agent_secondary;
                    $listingRental->date_available = $request->date_available;
                    $listingRental->rent = $request->rent;
                    $listingRental->display_rent = $request->display_rent;
                    $listingRental->bond = $request->bond;
                    $listingRental->save();

                    $listingPropertyDetails = new ListingPropertyDetails();
                    $listingPropertyDetails->listing_id = $listing->id;
                    $listingPropertyDetails->title = $request->type;
                    $listingPropertyDetails->description = $request->description;
                    $listingPropertyDetails->save();

                    $listing->summary = $listingPropertyDetails->title;
                    $listing->update();

                    $listingOptionalProperties = new OptionalProperties();
                    $listingOptionalProperties->property_id = $request->property_id;
                    $listingOptionalProperties->garages = $request->garages;
                    $listingOptionalProperties->carports = $request->carports;
                    $listingOptionalProperties->open_car_space = $request->open_car_space;
                    $listingOptionalProperties->save();

                    $listingGeneralFeatures = new AdvertGeneralFeatures();
                    $listingGeneralFeatures->listing_id = $listing->id;
                    $listingGeneralFeatures->new_or_established = $request->new_or_established;
                    $listingGeneralFeatures->ensuites = $request->ensuites;
                    $listingGeneralFeatures->toilets = $request->toilets;
                    $listingGeneralFeatures->furnished = $request->furnished;
                    $listingGeneralFeatures->pets_allowed = $request->pets_allowed;
                    $listingGeneralFeatures->smokers_permitted = $request->smokers_permitted;
                    $listingGeneralFeatures->balcony_or_deck = $request->balcony_or_deck;
                    $listingGeneralFeatures->deck = $request->deck;
                    $listingGeneralFeatures->fully_fenced = $request->fully_fenced;
                    $listingGeneralFeatures->garden_or_courtyard = $request->garden_or_courtyard;
                    $listingGeneralFeatures->internal_laundry = $request->internal_laundry;
                    $listingGeneralFeatures->outdoor_entertaining_area = $request->outdoor_entertaining_area;
                    $listingGeneralFeatures->outside_spa = $request->outside_spa;
                    $listingGeneralFeatures->secure_parking = $request->secure_parking;
                    $listingGeneralFeatures->shed = $request->shed;
                    $listingGeneralFeatures->swimming_pool = $request->swimming_pool;
                    $listingGeneralFeatures->tennis_court = $request->tennis_court;
                    $listingGeneralFeatures->alarm_system = $request->alarm_system;
                    $listingGeneralFeatures->broadband = $request->broadband;
                    $listingGeneralFeatures->Built_in_wardrobes = $request->Built_in_wardrobes;
                    $listingGeneralFeatures->dishwasher = $request->dishwasher;
                    $listingGeneralFeatures->floorboards = $request->floorboards;
                    $listingGeneralFeatures->gas_heating = $request->gas_heating;
                    $listingGeneralFeatures->gym = $request->gym;
                    $listingGeneralFeatures->hot_water_service = $request->hot_water_service;
                    $listingGeneralFeatures->inside_spa = $request->inside_spa;
                    $listingGeneralFeatures->intercom = $request->intercom;
                    $listingGeneralFeatures->pay_tv_access = $request->pay_tv_access;
                    $listingGeneralFeatures->rumpus_room = $request->rumpus_room;
                    $listingGeneralFeatures->study = $request->study;
                    $listingGeneralFeatures->air_conditioning = $request->air_conditioning;
                    $listingGeneralFeatures->solar_hot_water = $request->solar_hot_water;
                    $listingGeneralFeatures->solar_panels = $request->solar_panels;
                    $listingGeneralFeatures->water_tank = $request->water_tank;
                    $listingGeneralFeatures->save();

                    $listingAdvertVideoUrl = new ListingAdvertVideoUrl();
                    $listingAdvertVideoUrl->listing_id = $listing->id;
                    $listingAdvertVideoUrl->video_url = $request->video_url;
                    $listingAdvertVideoUrl->online_tour = $request->online_tour;
                    $listingAdvertVideoUrl->save();

                    $message_action_name = $request->type === "Rental" ? "Rental Listing" : "Sale Listing";
                    $messsage_trigger_point = 'Created';
                    $data = [
                        "property_id" => $request->property_id,
                        "id" => $listing->id,
                        "status" => "pending",
                    ];
                    $activityMessageTrigger = new ActivityMessageTriggerController($message_action_name, '', $messsage_trigger_point, $data, "email");
                    $activityMessageTrigger->trigger();
                });

                return response()->json(['listing_id' => $listingId, 'message' => 'successful'], 200);
            }
        } catch (\Exception $ex) {
            return response()->json(["status" => false, "error" => ['error'], "message" => $ex->getMessage(), "data" => []], 500);
        }
    }

    /**
     * Show the specified resource.
     * @param int $id
     * @return Renderable
     */
    public function show($id)
    {
        try {
            $listing = Listing::where('id', $id)
                ->with(['advertisement', 'listing_floor_plan_images', 'properties'])
                ->get();
            return response()->json(['data' => $listing, 'message' => 'Successfull']);
        } catch (\Exception $ex) {
            return response()->json(["status" => false, "error" => ['error'], "message" => $ex->getMessage(), "data" => []], 500);
        }
    }
    public function showinspection($id)
    {
        try {
            $ins = Inspection::where('property_id', $id)->get();
            return response()->json(['data' => $ins, 'message' => 'Successfull'], 200);
        } catch (\Exception $ex) {
            return response()->json(["status" => false, "error" => ['error'], "message" => $ex->getMessage(), "data" => []], 500);
        }
    }

    /**
     * Show the form for editing the specified resource.
     * @param int $id
     * @return Renderable
     */
    public function edit($id)
    {
        return view('listings::edit');
    }

    /**
     * Update the specified resource in storage.
     * @param Request $request
     * @param int $id
     * @return Renderable
     */
    public function update(Request $request, $id)
    {
        //
    }



    public function listingLabelUpdate(Request $request, $id)
    {
        try {
            $listingLabel = Listing::where('id', $id)
                ->with('properties.property_address', 'advertGeneralFeatures', 'listingPropetyDetails', 'listingAdvertisement')
                ->first();

            $settingListingProvider = SettingListingProvider::where('company_id', auth('api')->user()->company_id)->first();

            $agentID = $settingListingProvider->agent_id;
            $uniqueID = random_int(1000, 9999);
            $currentDateTime = date('Y-m-d-H:i:s');
            $body = null;
            $attributeNames = array(
                'id' => $request->id,
                'status' => $request->status,
            );

            $validator = Validator::make($attributeNames, [
                'id' => 'required',
                'status' => 'required'
            ]);

            if ($validator->fails()) {
                return response()->json(array('error' => $validator->getMessageBag()->toArray()), 422);
            } else {
                if ($request->status === "Draft") {
                    $listingLabel = Listing::where('id', $id)->first();
                    $uniqueID = $listingLabel->unique_id;
                    $propertyID = $listingLabel->property_id;
                    $body = <<<XML
                    <propertyList date="$currentDateTime">
                    <rental modTime="$currentDateTime" status="offmarket">
                        <agentID>$agentID</agentID>
                        <uniqueListingAgentID>"3c0aa351-9829-44b7-b9a0-0ba26c856b94"</uniqueListingAgentID>
                        <propertyID>$propertyID</propertyID>
                        <uniqueID>$uniqueID</uniqueID>
                    </rental>
                    </propertyList>
                    XML;
                    $activity = PropertyActivity::where('id', $listingLabel->id)->update(["status" => "Reported"]);
                    $message_action_name = "Listing";
                    $messsage_trigger_point = "Unpublished";
                    $data = [
                        "property_id" => $propertyID,
                        "tenant_contact_id" => null,
                        "id" => $request->id,
                    ];

                    $activityMessageTrigger = new ActivityMessageTriggerController($message_action_name, '', $messsage_trigger_point, $data, "email");

                    $value = $activityMessageTrigger->trigger();
                    $listingLabel->status = $request->status;
                    // $listingLabel->unique_id = $uniqueID;
                    $listingLabel->update();
                    // return response()->json(['listing_id' => $listingLabel->id, 'status' => $listingLabel->status, 'message' => 'successful'], 200);
                } else if ($request->status === "Published") {
                    $listingLabel = Listing::where('id', $id)
                        ->with('properties.property_address', 'advertGeneralFeatures', 'listingPropetyDetails', 'listingAdvertisement', 'listing_advert_slider_images', 'properties.property_images', 'listing_floor_plan_images')
                        ->first();
                    $firstImage = null;
                    $secondImage = null;
                    $thirdImage = null;

                    $bucketUrl = getenv('API_IMAGE');

                    foreach ($listingLabel->listing_advert_slider_images as $key => $value) {
                        if ($key === 0) {
                            $firstImage = $bucketUrl . $value->advert_slider;
                        } elseif ($key === 1) {
                            $secondImage = $bucketUrl . $value->advert_slider;
                        } elseif ($key === 2) {
                            $thirdImage = $bucketUrl . $value->advert_slider;
                        } elseif ($key === 3) {
                            $forthImage = $bucketUrl . $value->advert_slider;
                        } elseif ($key === 3) {
                            $fiveImage = $bucketUrl . $value->advert_slider;
                        }
                    }
                    $floorFirstImage = null;
                    $floorSecondImage = null;
                    foreach ($listingLabel->listing_floor_plan_images as $key => $value) {
                        if ($key === 0) {
                            $floorFirstImage = $bucketUrl . $value->floor_image;
                        } elseif ($key === 1) {
                            $floorSecondImage = $bucketUrl . $value->floor_image;
                        }
                    }

                    $dateAvailable = $listingLabel->listingAdvertisement->date_available;

                    $activity = PropertyActivity::where('id', $listingLabel->id)->update(["status" => "Reported"]);


                    $message_action_name = $listingLabel->type === "Rental" ? "Rental Listing" : "Sale Listing";
                    $messsage_trigger_point = "Published";
                    $data = [
                        "property_id" => $listingLabel->property_id,
                        "id" => $request->id,
                    ];
                    $activityMessageTrigger = new ActivityMessageTriggerController($message_action_name, '', $messsage_trigger_point, $data, "email");
                    $value = $activityMessageTrigger->trigger();


                    $propertyID = $listingLabel->property_id;
                    $rent = $listingLabel->listingAdvertisement->rent;
                    // return $rent;
                    $land_area = $listingLabel->properties->land_area;
                    $land_size = $listingLabel->properties->land_size;
                    // return $land_size;
                    $agentEmail = $listingLabel->agent_email;
                    $agentPhone = $listingLabel->agent_phone;

                    $bedroom = $listingLabel->bedroom;
                    $bathroom = $listingLabel->bathroom;
                    $toilets = $listingLabel->advertGeneralFeatures->toilets;
                    $car_space = $listingLabel->car_space;

                    $date = date('Y-m-d');

                    $subNumber = $listingLabel->properties->property_address->number;

                    $streetNumber = $listingLabel->properties->property_address->number;

                    $street = $listingLabel->properties->property_address->street;

                    $suburb = $listingLabel->properties->property_address->suburb;

                    $state = $listingLabel->properties->property_address->state;
                    $postcode = $listingLabel->properties->property_address->postcode;
                    $country = $listingLabel->properties->property_address->country;
                    $agentName = $listingLabel->properties->manager_name;
                    $bulidingArea = null;


                    $description = $listingLabel->listingPropetyDetails->description;
                    $title = $listingLabel->listingPropetyDetails->title;
                    //general features
                    //  indoor start
                    $alarm_system = $listingLabel->advertGeneralFeatures->alarm_system;
                    $broadband = $listingLabel->advertGeneralFeatures->broadband;
                    $dishwasher = $listingLabel->advertGeneralFeatures->dishwasher;
                    $floorboards = $listingLabel->advertGeneralFeatures->floorboards;
                    $gas_heating = $listingLabel->advertGeneralFeatures->gas_heating;

                    $gym = $listingLabel->advertGeneralFeatures->gym;
                    $hot_water_service = $listingLabel->advertGeneralFeatures->hot_water_service;
                    $inside_spa = $listingLabel->advertGeneralFeatures->inside_spa;

                    $intercom = $listingLabel->advertGeneralFeatures->intercom;
                    $pay_tv_access = $listingLabel->advertGeneralFeatures->pay_tv_access;
                    $rumpus_room = $listingLabel->advertGeneralFeatures->rumpus_room;
                    $study = $listingLabel->advertGeneralFeatures->study;


                    //  indoor end

                    //  outdoor features start 
                    $balcony_or_deck = $listingLabel->advertGeneralFeatures->balcony_or_deck;

                    $deck = $listingLabel->advertGeneralFeatures->deck;
                    $fully_fenced = $listingLabel->advertGeneralFeatures->fully_fenced;
                    $garden_or_courtyard = $listingLabel->advertGeneralFeatures->garden_or_courtyard;

                    $outside_spa = $listingLabel->advertGeneralFeatures->outside_spa;
                    $secure_parking = $listingLabel->advertGeneralFeatures->secure_parking;
                    $shed = $listingLabel->advertGeneralFeatures->shed;

                    $swimming_pool = $listingLabel->advertGeneralFeatures->swimming_pool;
                    $tennis_court = $listingLabel->advertGeneralFeatures->tennis_court;
                    //outdoor features end

                    //  ecofriendly start
                    $solar_panels = $listingLabel->advertGeneralFeatures->solar_panels;
                    $solar_hot_water = $listingLabel->advertGeneralFeatures->solar_hot_water;
                    // ecofriendly end
                    $wardrobes = $listingLabel->advertGeneralFeatures->Built_in_wardrobes;
                    $air_conditioning = $listingLabel->advertGeneralFeatures->air_conditioning;


                    $dishwasher = $listingLabel->advertGeneralFeatures->dishwasher;
                    $ensuites = $listingLabel->advertGeneralFeatures->ensuites;


                    $furnished = $listingLabel->advertGeneralFeatures->furnished;






                    $internal_laundry = $listingLabel->advertGeneralFeatures->internal_laundry;
                    $outdoor_entertaining_area = $listingLabel->advertGeneralFeatures->outdoor_entertaining_area;


                    $pets_allowed = $listingLabel->advertGeneralFeatures->pets_allowed;



                    $smokers_permitted = $listingLabel->advertGeneralFeatures->smokers_permitted;

                    // indoor start
                    $alarm_system = isset($alarm_system) ? "yes" : "no";
                    $broadband = isset($broadband) ? "yes" : "no";
                    $dishwasher = isset($dishwasher) ? "yes" : "no";
                    $floorboards = isset($floorboards) ? "yes" : "no";
                    $gas_heating = isset($gas_heating) ? "yes" : "no";

                    $gym = isset($gym) ? "yes" : "no";
                    $hot_water_service = isset($hot_water_service) ? "yes" : "no";
                    $inside_spa = isset($inside_spa) ? "yes" : "no";

                    $intercom = isset($intercom) ? "yes" : "no";
                    $pay_tv_access = isset($pay_tv_access) ? "yes" : "no";
                    $rumpus_room = isset($rumpus_room) ? "yes" : "no";
                    $study = isset($study) ? "yes" : "no";

                    // indoor end

                    // outdoor features start 
                    $balcony_or_deck = isset($balcony_or_deck) ? "yes" : "no";
                    $deck = isset($deck) ? "yes" : "no";
                    $fully_fenced = isset($fully_fenced) ? "yes" : "no";

                    $garden_or_courtyard = isset($garden_or_courtyard) ? "yes" : "no";
                    $outdoor_entertaining_area = isset($outdoor_entertaining_area) ? "yes" : "no";
                    $outside_spa = isset($outside_spa) ? "yes" : "no";
                    $secure_parking = isset($secure_parking) ? "yes" : "no";
                    $shed = isset($shed) ? "yes" : "no";
                    $swimming_pool = isset($swimming_pool) ? "yes" : "no";
                    $tennis_court = isset($tennis_court) ? "yes" : "no";
                    // outdoor features end
                    //  ecofriendly start
                    $solar_hot_water = isset($solar_hot_water) ? "yes" : "no";
                    $solar_panels = isset($solar_panels) ? "yes" : "no";
                    $Built_in_wardrobes = isset($wardrobes) ? "yes" : "no";
                    //  ecofriendly end


                    $furnished = isset($furnished) ? "yes" : "no";
                    $pets_allowed = isset($pets_allowed) ? "yes" : "no";
                    $smokers_permitted = isset($smokers_permitted) ? "yes" : "no";
                    $air_conditioning = isset($air_conditioning) ? "yes" : "no";
                    $ensuites = isset($ensuites) ? "yes" : "no";
                    $internal_laundry = isset($internal_laundry) ? "yes" : "no";

                    $toilets = isset($toilets) ? "yes" : "no";
                    // return $secure_parking;

                    // $listingLabel->status = $request->status;
                    // $listingLabel->unique_id = $uniqueID;
                    // $listingLabel->update();
                    // return "hello";

                    $body = <<<XML
                    <propertyList date="$currentDateTime">
                    <rental modTime="$currentDateTime" status="offmarket">
                                    <agentID>$agentID</agentID>
                                    <uniqueListingAgentID>"3c0aa351-9829-44b7-b9a0-0ba26c856b94"</uniqueListingAgentID>
                                    <propertyID>$propertyID</propertyID>
                                    <uniqueID>$uniqueID</uniqueID>
                                    <address display="no">
                                        <subNumber>$subNumber</subNumber>
                                        <streetNumber>$streetNumber</streetNumber>
                                        <street>$street</street>
                                        <suburb display="yes">$suburb</suburb>
                                        <state>$state</state>
                                        <postcode>$postcode</postcode>
                                        <country>$country</country>
                                        <display>no</display>
                                        <streetview>no</streetview>
                                    </address>
                                    <!-- <authority value="exclusive" />
                                    <setSale date="2023-08-01-12:30:00"/> -->
                                    <newConstruction>true</newConstruction>
                                    <!-- <underOffer value="Yes" /> -->
                                    <videoLink href=""/>
                                    <!-- <price display="yes">$rent</price> -->
                                    <dateAvailable>$dateAvailable</dateAvailable>
                                    <rent display="no" period="weekly">$rent</rent>


                                    <landDetails>
                                        <area unit="squareMeter"></area>
                                    </landDetails>
                                    <buildingDetails>
                                        <area unit="square">$land_size</area>
                                        <energyRating></energyRating>
                                    </buildingDetails>
                                    <listingAgent id="1">
                                        <agentID>$agentID</agentID>
                                        <name>$agentName</name>
                                        <telephone type="BH">$agentPhone</telephone>
                                        <email>$agentEmail</email>
                                        <twitterURL/>
                                        <facebookURL/>
                                        <linkedInURL/>
                                    </listingAgent>
                                    <listingAgent id="2">
                                    </listingAgent>
                                    <municipality />
                                    <category name="ServicedApartment"/>
                                    <headline>$title</headline>
                                    <description>
                                        <!-- REA XML Test Listing by karim -->
                                        $description
                                    </description>
                                    <features>
                                        <!-- indoor -->
                                        <alarmSystem>$alarm_system</alarmSystem>
                                        <broadband>$broadband</broadband>
                                        <builtInRobes>false</builtInRobes>
                                        <dishwasher>$dishwasher</dishwasher>
                                        <floorboards>$floorboards</floorboards>
                                        <gasHeating>$gas_heating</gasHeating>
                                       
                                        <gym>$gym</gym>
                                        <hotWaterService>$hot_water_service</hotWaterService>
                                        <insideSpa>$inside_spa</insideSpa>

                                        <intercom>$intercom</intercom>
                                        <payTV>$pay_tv_access</payTV>
                                        <rumpusRoom>$rumpus_room</rumpusRoom>
                                        <study>$study</study>
                                        <!-- indoor end  -->


                                        
                                        <bedrooms>$bedroom</bedrooms>
                                        <bathrooms>$bathroom</bathrooms>
                                        <toilets>$toilets</toilets>
                                        <ensuite>$ensuites</ensuite>
                                       
                                        <garages>yes</garages>
                                        <openSpaces>false</openSpaces>
                                        <!-- <carports>$car_space</carports> -->
                                        <remoteGarage>false</remoteGarage>
                                       
                                        <!-- <airConditioning>$air_conditioning</airConditioning> -->


                                        
                                        <!-- <alarmSystem>yes</alarmSystem> -->

                                        <!-- Outdoor features -->
                                        <balcony>$balcony_or_deck</balcony>
                                        <deck>$deck</deck>
                                        <fullyFenced>$fully_fenced</fullyFenced>

                                        <courtyard>$garden_or_courtyard</courtyard>
                                        <outdoorEnt>$outdoor_entertaining_area</outdoorEnt>

                                        <outsideSpa>$outside_spa</outsideSpa>
                                        <secureParking>$secure_parking</secureParking>
                                        <shed>$shed</shed>

                                        <poolInGround>$swimming_pool</poolInGround>
                                        <tennisCourt>$tennis_court</tennisCourt>
                                        <vacuumSystem>false</vacuumSystem>
                                        <!-- <openFirePlace>false</openFirePlace> -->
                                        <heating>$gas_heating</heating>
                                        
                                       <allowances>
                                       <furnished>$furnished</furnished>
                                       <petFriendly>$pets_allowed</petFriendly>
                                       <smokers>$smokers_permitted</smokers>
                                       </allowances>
                                        <ecoFriendly>
                                            <solarPanels>$solar_panels</solarPanels>
                                            <solarHotWater>$solar_hot_water</solarHotWater>
                                            <waterTank>false</waterTank>
                                            <greyWaterSystem>false</greyWaterSystem>
                                        </ecoFriendly>
                                        <ductedCooling>false</ductedCooling>
                                        <ductedHeating>false</ductedHeating>
                                        
                                        <evaporativeCooling>false</evaporativeCooling>
                                       
                                       
                                        <hydronicHeating>false</hydronicHeating>
                                       
                                        <livingAreas>false</livingAreas>
                                        
                                        
                                        <reverseCycleAirCon>false</reverseCycleAirCon>
                                       
                                        <splitSystemAirCon>false</splitSystemAirCon>
                                        <splitSystemHeating>false</splitSystemHeating>
                                       
                                        <workshop>false</workshop>
                                        <otherFeatures></otherFeatures>
                                    </features>
                                    <inspectionTimes/>
                                    <externalLink href=""/>
                                    <images>
                                        <img id="m" modTime="$currentDateTime" url="$firstImage" format="jpg"/>

                                        <img id="b" modTime="$currentDateTime" url="$secondImage"/>
                                        <img id="c" modTime="$currentDateTime" url="$thirdImage"/>
                                        <img id="d" />
                                        <img id="e" />
                                    </images>
                                    <objects>
                                        <img id="f" modTime="$currentDateTime" url="$firstImage" />
                                        <img id="g"  />
                                        <img id="h" />
                                        <img id="i"  />
                                        <img id="j"  />
                                        <floorplan id="2" modTime="$currentDateTime" url="$floorFirstImage" format="jpg"/>
                                        <document id="1" />
                                    </objects>
                                    <media>
                                    </media>
                                </rental>
                            </propertyList>
                    XML;




                    // // return $listingLabel;
                    $listingLabel->status = $request->status;
                    $listingLabel->unique_id = $uniqueID;
                    $listingLabel->save();


                    // return response()->json(['listing_id' => $listingLabel->id, 'status' => $listingLabel->status, 'message' => 'successful'], 200);
                } else if ($request->status === "Leased") {
                    $listingLabel = Listing::where('id', $id)->first();
                    $uniqueID = $listingLabel->unique_id;
                    $propertyID = $listingLabel->property_id;

                    $body = <<<XML
                    <propertyList date="$currentDateTime">
                    <rental modTime="$currentDateTime" status="leased">

                        <agentID>$agentID</agentID>
                        <uniqueListingAgentID>"3c0aa351-9829-44b7-b9a0-0ba26c856b94"</uniqueListingAgentID>
                        <propertyID>$propertyID</propertyID>
                        <uniqueID>$uniqueID</uniqueID>



                    </rental>
                    </propertyList>
                    XML;
                    $activity = PropertyActivity::where('id', $listingLabel->id)->update(["status" => "Leased"]);

                    $message_action_name = $listingLabel->type === "Rental" ? "Rental Listing" : "Sale Listing";
                    $messsage_trigger_point = "Leased";
                    $data = [
                        "property_id" => $propertyID,
                        "id" => $request->id,
                    ];
                    $activityMessageTrigger = new ActivityMessageTriggerController($message_action_name, '', $messsage_trigger_point, $data, "email");
                    $value = $activityMessageTrigger->trigger();


                    $listingLabel->status = $request->status;
                    $listingLabel->unique_id = $uniqueID;
                    $listingLabel->update();
                }
                $login = '3c0aa351-9829-44b7-b9a0-0ba26c856b94';
                $password = 'b476b67a-f9d2-4a21-affd-dfe1b146d454';
                $ch = curl_init();
                curl_setopt($ch, CURLOPT_URL, 'https://api.realestate.com.au/oauth/token');
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                curl_setopt($ch, CURLOPT_POST, 1);
                curl_setopt($ch, CURLOPT_POSTFIELDS, "grant_type=client_credentials");
                curl_setopt($ch, CURLOPT_USERPWD, "$login:$password");
                $headers = array();
                $headers[] = 'Content-Type: application/x-www-form-urlencoded';
                curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
                $result = curl_exec($ch);
                // return $result;

                if (curl_errno($ch)) {
                    // echo 'Error:' . curl_error($ch);
                    return response()->json(["status" => false, "error" => ['error'], "message" => $ch->getMessage(), "data" => []], 500);
                }
                curl_close($ch);
                $access = json_decode($result);

                $token = $access->access_token;


                $curl = curl_init();

                curl_setopt_array($curl, array(
                    CURLOPT_URL => "https://api.realestate.com.au/listing/v1/upload",
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => "",
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 30000,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => "POST",
                    CURLOPT_POSTFIELDS => $body,
                    CURLOPT_HTTPHEADER => array(
                        // Set Here Your Requesred Headers
                        'Content-Type: text/xml',
                        'Authorization: Bearer ' . $token
                        // 'Authorization: ' => $token
                    ),
                ));
                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    // echo "cURL Error #:" . $err;
                    return response()->json(["status" => false, "error" => ['error'], "message" => $err, "data" => []], 500);
                } else {
                    // return "hello";

                    // print_r(json_decode($response));
                    // return $response;
                    return response()->json(['listing_id' => $listingLabel->id, 'status' => $listingLabel->status, 'message' => 'successful'], 200);
                }
            }
        } catch (\Throwable $th) {
            return response()->json(["status" => false, "error" => ['error'], "message" => $th->getMessage(), "data" => []], 500);
        }
    }
    public function listingRepublish(Request $request, $id)
    {
        $listingLabel = Listing::where('id', $id)->with('properties.property_address', 'advertGeneralFeatures', 'listingPropetyDetails', 'listingAdvertisement', 'listing_advert_slider_images', 'properties.property_images')->first();


        $uniqueID = $listingLabel->unique_id;
        // return $uniqueID;
        $firstImage = null;
        $secondImage = null;
        $thirdImage = null;
        $bucketUrl = 'https://mydaybucket.s3.ap-southeast-2.amazonaws.com/';

        foreach ($listingLabel->listing_advert_slider_images as $key => $value) {
            if ($key === 0) {
                $firstImage = $bucketUrl . $value->advert_slider;
            } elseif ($key === 1) {
                $secondImage = $bucketUrl . $value->advert_slider;
            } elseif ($key === 2) {
                $thirdImage = $bucketUrl . $value->advert_slider;
            }
        }
        $dateAvailable = $listingLabel->listingAdvertisement->date_available;
        // return $dateAvailable;
        // $listingLabel->status = $request->status;
        // $listingLabel->update();

        // $activity = PropertyActivity::where('id', $request->job_id)->update(["status" => "Reported"]);
        // $message_action_name = "Listing";
        // $messsage_trigger_point = "Published";
        // $data = [
        //     "property_id" => $listingLabel->property_id,

        //     "tenant_contact_id" => null,
        //     "id" => $request->id,
        // ];

        // $activityMessageTrigger = new ActivityMessageTriggerController($message_action_name, '', $messsage_trigger_point, $data, "email");

        // $value = $activityMessageTrigger->trigger();


        $propertyID = $listingLabel->property_id;
        $rent = $listingLabel->listingAdvertisement->rent;
        // return $rent;
        $land_area = $listingLabel->properties->land_area;
        $land_size = $listingLabel->properties->land_size;
        // return $land_size;
        $agentEmail = $listingLabel->agent_email;
        $agentPhone = $listingLabel->agent_phone;

        $bedroom = $listingLabel->bedroom;
        $bathroom = $listingLabel->bathroom;
        $car_space = $listingLabel->car_space;

        $date = date('Y-m-d');
        $settingListingProvider = SettingListingProvider::where('company_id', auth('api')->user()->company_id)->first();
        // return $settingListingProvider->agent_id;
        $agentID = $settingListingProvider->agent_id;
        // $agentID = "LQNDVD";
        $subNumber = $listingLabel->properties->property_address->number;
        $streetNumber = $listingLabel->properties->property_address->number;
        $street = $listingLabel->properties->property_address->street;
        ;
        $suburb = $listingLabel->properties->property_address->suburb;
        $state = $listingLabel->properties->property_address->state;
        $postcode = $listingLabel->properties->property_address->postcode;
        $country = $listingLabel->properties->property_address->country;
        $agentName = $listingLabel->properties->manager_name;
        $bulidingArea = null;


        $description = $listingLabel->listingPropetyDetails->description;
        $title = $listingLabel->listingPropetyDetails->title;
        //general features
        $wardrobes = $listingLabel->advertGeneralFeatures->Built_in_wardrobes;
        $air_conditioning = $listingLabel->advertGeneralFeatures->air_conditioning;
        $alarm_system = $listingLabel->advertGeneralFeatures->alarm_system;
        $balcony_or_deck = $listingLabel->advertGeneralFeatures->balcony_or_deck;
        $broadband = $listingLabel->advertGeneralFeatures->broadband;
        $deck = $listingLabel->advertGeneralFeatures->deck;
        $dishwasher = $listingLabel->advertGeneralFeatures->dishwasher;
        $ensuites = $listingLabel->advertGeneralFeatures->ensuites;
        $floorboards = $listingLabel->advertGeneralFeatures->floorboards;
        $fully_fenced = $listingLabel->advertGeneralFeatures->fully_fenced;
        $furnished = $listingLabel->advertGeneralFeatures->furnished;
        $garden_or_courtyard = $listingLabel->advertGeneralFeatures->garden_or_courtyard;
        $gas_heating = $listingLabel->advertGeneralFeatures->gas_heating;
        $gym = $listingLabel->advertGeneralFeatures->gym;
        $hot_water_service = $listingLabel->advertGeneralFeatures->hot_water_service;
        $inside_spa = $listingLabel->advertGeneralFeatures->inside_spa;
        $intercom = $listingLabel->advertGeneralFeatures->intercom;
        $internal_laundry = $listingLabel->advertGeneralFeatures->internal_laundry;
        $outdoor_entertaining_area = $listingLabel->advertGeneralFeatures->outdoor_entertaining_area;
        $outside_spa = $listingLabel->advertGeneralFeatures->outside_spa;
        $pay_tv_access = $listingLabel->advertGeneralFeatures->pay_tv_access;
        $pets_allowed = $listingLabel->advertGeneralFeatures->pets_allowed;
        $rumpus_room = $listingLabel->advertGeneralFeatures->rumpus_room;
        $secure_parking = $listingLabel->advertGeneralFeatures->secure_parking;
        $shed = $listingLabel->advertGeneralFeatures->shed;
        $smokers_permitted = $listingLabel->advertGeneralFeatures->smokers_permitted;
        $solar_hot_water = $listingLabel->advertGeneralFeatures->solar_hot_water;
        $solar_panels = $listingLabel->advertGeneralFeatures->solar_panels;
        $study = $listingLabel->advertGeneralFeatures->study;
        $swimming_pool = $listingLabel->advertGeneralFeatures->swimming_pool;
        $tennis_court = $listingLabel->advertGeneralFeatures->tennis_court;
        $toilets = $listingLabel->advertGeneralFeatures->toilets;

        $Built_in_wardrobes = isset($Built_in_wardrobes) ? "yes" : "no";
        $air_conditioning = isset($air_conditioning) ? "yes" : "no";
        $alarm_system = isset($alarm_system) ? "yes" : "no";

        $balcony_or_deck = isset($balcony_or_deck) ? "yes" : "no";

        $broadband = isset($broadband) ? "yes" : "no";

        $deck = isset($deck) ? "yes" : "no";

        $dishwasher = isset($dishwasher) ? "yes" : "no";

        $ensuites = isset($ensuites) ? "yes" : "no";
        $floorboards = isset($floorboards) ? "yes" : "no";
        $fully_fenced = isset($fully_fenced) ? "yes" : "no";
        $furnished = isset($furnished) ? "yes" : "no";
        $garden_or_courtyard = isset($garden_or_courtyard) ? "yes" : "no";
        $gas_heating = isset($gas_heating) ? "yes" : "no";
        $gym = isset($gym) ? "yes" : "no";
        $hot_water_service = isset($hot_water_service) ? "yes" : "no";
        $inside_spa = isset($inside_spa) ? "yes" : "no";
        $intercom = isset($intercom) ? "yes" : "no";
        $internal_laundry = isset($internal_laundry) ? "yes" : "no";
        $outdoor_entertaining_area = isset($outdoor_entertaining_area) ? "yes" : "no";
        $outside_spa = isset($outside_spa) ? "yes" : "no";
        $pay_tv_access = isset($pay_tv_access) ? "yes" : "no";
        $pets_allowed = isset($pets_allowed) ? "yes" : "no";
        $secure_parking = isset($secure_parking) ? "yes" : "no";
        $shed = isset($shed) ? "yes" : "no";
        $smokers_permitted = isset($smokers_permitted) ? "yes" : "no";
        $solar_hot_water = isset($solar_hot_water) ? "yes" : "no";
        $solar_panels = isset($solar_panels) ? "yes" : "no";
        $study = isset($study) ? "yes" : "no";
        $swimming_pool = isset($swimming_pool) ? "yes" : "no";
        $tennis_court = isset($tennis_court) ? "yes" : "no";
        $toilets = isset($toilets) ? "yes" : "no";
        $currentDateTime = date('Y-m-d-H:i:s');
        // $listingLabel->status = $request->status;
        // $listingLabel->unique_id = $uniqueID;
        // $listingLabel->update();
        // return "hello";

        $body = <<<XML
                    <propertyList date="$currentDateTime">
                    <rental modTime="$currentDateTime" status="offmarket">
                                    <agentID>$agentID</agentID>
                                    <uniqueListingAgentID>"3c0aa351-9829-44b7-b9a0-0ba26c856b94"</uniqueListingAgentID>
                                    <propertyID>$propertyID</propertyID>
                                    <uniqueID>$uniqueID</uniqueID>
                                    <address display="no">
                                        <subNumber>$subNumber</subNumber>
                                        <streetNumber>$streetNumber</streetNumber>
                                        <street>$street</street>
                                        <suburb display="yes">$suburb</suburb>
                                        <state>$state</state>
                                        <postcode>$postcode</postcode>
                                        <country>$country</country>
                                        <display>no</display>
                                        <streetview>no</streetview>
                                    </address>
                                    <!-- <authority value="exclusive" />
                                    <setSale date="2023-08-01-12:30:00"/> -->
                                    <newConstruction>true</newConstruction>
                                    <!-- <underOffer value="Yes" /> -->
                                    <videoLink href=""/>
                                    <!-- <price display="yes">$rent</price> -->
                                    <dateAvailable>$dateAvailable</dateAvailable>
                                    <rent display="no" period="weekly">$rent</rent>


                                    <landDetails>
                                        <area unit="squareMeter"></area>
                                    </landDetails>
                                    <buildingDetails>
                                        <area unit="square">$land_size</area>
                                        <energyRating></energyRating>
                                    </buildingDetails>
                                    <listingAgent id="1">
                                        <agentID>$agentID</agentID>
                                        <name>$agentName</name>
                                        <telephone type="BH">$agentPhone</telephone>
                                        <email>$agentEmail</email>
                                        <twitterURL/>
                                        <facebookURL/>
                                        <linkedInURL/>
                                    </listingAgent>
                                    <listingAgent id="2">
                                    </listingAgent>
                                    <municipality />
                                    <category name="ServicedApartment"/>
                                    <headline>$title</headline>
                                    <description>
                                        <!-- REA XML Test Listing by karim -->
                                        $description
                                    </description>
                                    <features>
                                        <bedrooms>$bedroom</bedrooms>
                                        <bathrooms>$bathroom</bathrooms>
                                        <toilets>$toilets</toilets>
                                        <ensuite>$ensuites</ensuite>
                                        <garages>false</garages>
                                        <openSpaces>false</openSpaces>
                                        <carports>$car_space</carports>
                                        <remoteGarage>false</remoteGarage>
                                        <secureParking>false</secureParking>
                                        <airConditioning>false</airConditioning>
                                        <broadband>$broadband</broadband>
                                        <alarmSystem>$alarm_system</alarmSystem>
                                        <vacuumSystem>false</vacuumSystem>
                                        <intercom>$intercom</intercom>
                                        <poolInGround>$swimming_pool</poolInGround>
                                        <!-- <poolAboveGround>$swimming_pool</poolAboveGround> -->
                                        <tennisCourt>$tennis_court</tennisCourt>
                                        <balcony>$balcony_or_deck</balcony>
                                        <deck>$deck</deck>
                                        <courtyard>false</courtyard>
                                        <outdoorEnt>false</outdoorEnt>
                                        <shed>$shed</shed>
                                        <fullyFenced>$fully_fenced</fullyFenced>
                                        <furnished>$furnished</furnished>
                                        <openFirePlace>false</openFirePlace>
                                        <heating>false</heating>
                                        <hotWaterService>false</hotWaterService>
                                        <dishwasher>$dishwasher</dishwasher>
                                        <ecoFriendly>
                                            <solarPanels>$solar_panels</solarPanels>
                                            <solarHotWater>false</solarHotWater>
                                            <waterTank>false</waterTank>
                                            <greyWaterSystem>false</greyWaterSystem>
                                        </ecoFriendly>
                                        <ductedCooling>false</ductedCooling>
                                        <ductedHeating>false</ductedHeating>
                                        <builtInRobes>false</builtInRobes>
                                        <evaporativeCooling>false</evaporativeCooling>
                                        <floorboards>false</floorboards>
                                        <gasHeating>$gas_heating</gasHeating>
                                        <hydronicHeating>false</hydronicHeating>
                                        <insideSpa>$inside_spa</insideSpa>
                                        <gym>$gym</gym>
                                        <livingAreas>false</livingAreas>
                                        <outsideSpa>false</outsideSpa>
                                        <payTV>$pay_tv_access</payTV>
                                        <reverseCycleAirCon>false</reverseCycleAirCon>
                                        <rumpusRoom>$rumpus_room</rumpusRoom>
                                        <splitSystemAirCon>false</splitSystemAirCon>
                                        <splitSystemHeating>false</splitSystemHeating>
                                        <study>$study</study>
                                        <workshop>false</workshop>
                                        <otherFeatures></otherFeatures>
                                    </features>
                                    <inspectionTimes/>
                                    <externalLink href=""/>
                                    <images>
                                        <img id="m" modTime="2009-07-09-14:30:00" url="https://rea-xml-test-images.s3-ap-southeast-2.amazonaws.com/43.jpg" format="jpg"/>

                                        <img id="b" modTime="2009-07-09-14:30:00" url="$firstImage"/>
                                        <img id="c" modTime="2009-07-09-14:30:00" url="$secondImage"/>
                                        <img id="d" />
                                        <img id="e" />
                                    </images>
                                    <objects>
                                        <img id="f" modTime="2009-07-09-14:30:00" url="$firstImage" />
                                        <img id="g"  />
                                        <img id="h" />
                                        <img id="i"  />
                                        <img id="j"  />
                                        <floorplan id="2" />
                                        <document id="1" />
                                    </objects>
                                    <media>
                                    </media>
                                </rental>
                            </propertyList>
                    XML;
        // return $body;
        $login = '3c0aa351-9829-44b7-b9a0-0ba26c856b94';
        $password = 'b476b67a-f9d2-4a21-affd-dfe1b146d454';
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, 'https://api.realestate.com.au/oauth/token');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "grant_type=client_credentials");
        curl_setopt($ch, CURLOPT_USERPWD, "$login:$password");
        $headers = array();
        $headers[] = 'Content-Type: application/x-www-form-urlencoded';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        $result = curl_exec($ch);
        // return $result;

        if (curl_errno($ch)) {
            // echo 'Error:' . curl_error($ch);
            return response()->json(['status' => false, 'error' => ['error'], 'message' => $ch->getMessage(), 'data' => []], 500);
        }
        curl_close($ch);
        $access = json_decode($result);

        $token = $access->access_token;


        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => "https://api.realestate.com.au/listing/v1/upload",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30000,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => $body,
            CURLOPT_HTTPHEADER => array(
                // Set Here Your Requesred Headers
                'Content-Type: text/xml',
                'Authorization: Bearer ' . $token
                // 'Authorization: ' => $token
            ),
        ));
        $response = curl_exec($curl);
        $err = curl_error($curl);
        curl_close($curl);

        if ($err) {
            // echo "cURL Error #:" . $err;
            // return $err;
            return response()->json(['status' => false, 'error' => ['error'], 'message' => $err, 'data' => []], 500);
        } else {
            // print_r(json_decode($response));
            // return $response;
            // $listingLabel->status = $request->status;
            $listingLabel->unique_id = $uniqueID;
            $listingLabel->secondary_status = null;

            $listingLabel->update();
            return response()->json(['listing_id' => $listingLabel->id, 'status' => $listingLabel->status, 'message' => 'successful'], 200);
        }


        // // return $listingLabel;
        // $listingLabel->status = $request->status;
        // $listingLabel->save();
        $listingLabel->status = $request->status;
        $listingLabel->unique_id = $uniqueID;
        $listingLabel->secondary_status = null;

        $listingLabel->update();

        return response()->json(['listing_id' => $listingLabel->id, 'status' => $listingLabel->status, 'message' => 'successful'], 200);
    }
    /**
     * Remove the specified resource from storage.
     * @param int $id
     * @return Renderable
     */
    public function destroy($id)
    {
        try {
            $listingLabel = Listing::where('id', $id)->first();
            $uniqueID = $listingLabel->unique_id;
            $propertyID = $listingLabel->property_id;
            $settingListingProvider = SettingListingProvider::where('company_id', auth('api')->user()->company_id)->first();
            // return $settingListingProvider->agent_id;
            $agentID = $settingListingProvider->agent_id;
            // $agentID = "LQNDVD";
            $currentDateTime = date('Y-m-d-H:i:s');

            $body = <<<XML
                    <propertyList date="$currentDateTime">
                    <rental modTime="$currentDateTime"  status="deleted">

                        <agentID>$agentID</agentID>
                        <uniqueListingAgentID>"3c0aa351-9829-44b7-b9a0-0ba26c856b94"</uniqueListingAgentID>
                        <propertyID>$propertyID</propertyID>
                        <uniqueID>$uniqueID</uniqueID>



                    </rental>
                    </propertyList>
                    XML;
            $login = '3c0aa351-9829-44b7-b9a0-0ba26c856b94';
            $password = 'b476b67a-f9d2-4a21-affd-dfe1b146d454';
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, 'https://api.realestate.com.au/oauth/token');
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_POST, 1);
            curl_setopt($ch, CURLOPT_POSTFIELDS, "grant_type=client_credentials");
            curl_setopt($ch, CURLOPT_USERPWD, "$login:$password");
            $headers = array();
            $headers[] = 'Content-Type: application/x-www-form-urlencoded';
            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
            $result = curl_exec($ch);
            // return $result;

            if (curl_errno($ch)) {
                // echo 'Error:' . curl_error($ch);
                return response()->json(["status" => false, "error" => ['error'], "message" => $ch->getMessage(), "data" => []], 500);
            }
            curl_close($ch);
            $access = json_decode($result);

            $token = $access->access_token;


            $curl = curl_init();

            curl_setopt_array($curl, array(
                CURLOPT_URL => "https://api.realestate.com.au/listing/v1/upload",
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 30000,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => "POST",
                CURLOPT_POSTFIELDS => $body,
                CURLOPT_HTTPHEADER => array(
                    // Set Here Your Requesred Headers
                    'Content-Type: text/xml',
                    'Authorization: Bearer ' . $token
                    // 'Authorization: ' => $token
                ),
            ));
            $response = curl_exec($curl);
            $err = curl_error($curl);
            curl_close($curl);

            if ($err) {
                // echo "cURL Error #:" . $err;
                return response()->json(["status" => false, "error" => ['error'], "message" => $err, "data" => []], 500);
            } else {
                $propertyActivity = PropertyActivity::where('listing_id', $id)->pluck('id');
                // return $propertyActivity;
                $messageWithMail = MessageWithMail::whereIn('property_activity_id', $propertyActivity)->delete();
                $activityEmail = PropertyActivityEmail::whereIn('property_activity_id', $propertyActivity)->delete();
                $propertyActivity = PropertyActivity::where('listing_id', $id)->delete();

                $listing = Listing::where('id', $id)->delete();
                // return "hello";

                // print_r(json_decode($response));
                // return $response;
                // return response()->json(['listing_id' => $listingLabel->id, 'status' => $listingLabel->status, 'message' => 'successful'], 200);
                return response()->json(['data' => 'deleted', 'status' => 'successfull'], 200);
            }

            return response()->json(['data' => 'deleted', 'status' => 'successfull'], 200);
        } catch (\Throwable $th) {
            return response()->json(['status' => false, 'error' => ['error'], 'message' => $th->getMessage(), 'data' => []], 500);
        }
    }
    public function getListingDoc($id)
    {
        try {
            $listingDoc = InspectionTaskMaintenanceDoc::where('listing_id', $id)->with(
                [
                    'property' => function ($query) {
                        $query->addSelect('id', 'reference');
                    }
                ]
            )->get();
            return response()->json(['data' => $listingDoc, 'message' => 'Successfull'], 200);
        } catch (\Throwable $th) {
            return response()->json([
                "status" => "error",
                "error" => ['error'],
                "message" => $th->getMessage(),
                "data" => []
            ], 500);
        }
    }

    public function updateOffMarket(Request $request, $id)
    {
        try {
            // Validate the request data
            $request->validate([
                'status' => 'required|string',
                // Add validation rules for other fields to be updated
            ]);
            $settingListingProvider = SettingListingProvider::where('company_id', auth('api')->user()->company_id)->first();
            // return $settingListingProvider->agent_id;
            $agentID = $settingListingProvider->agent_id;
            $listingLabel = Listing::where('id', $id)->first();
            $uniqueID = $listingLabel->unique_id;
            $propertyID = $listingLabel->property_id;
            $currentDateTime = now()->format('Y-m-d H:i:s');


            // XML generation
            $body = <<<XML
            <propertyList date="$currentDateTime">
                <rental modTime="$currentDateTime" status="offmarket">
                    <agentID>$agentID</agentID>
                    <uniqueListingAgentID>"3c0aa351-9829-44b7-b9a0-0ba26c856b94"</uniqueListingAgentID>
                    <propertyID>$propertyID</propertyID>
                    <uniqueID>$uniqueID</uniqueID>
                </rental>
            </propertyList>
            XML;
            $listingLabel->status = $request->status;
            // $listingLabel->unique_id = $uniqueID;
            $listingLabel->update();
            // You can return a response, redirect, or anything else based on your application logic
            return response()->json(['message' => 'Listing updated successfully']);
        } catch (\Exception $e) {
            // Handle the exception (e.g., log the error, return a specific response)
            return response()->json(['error' => $e->getMessage()], 500);
        }
    }

    public function generatedAndUploadedDoc(Request $request, $id)
    {
        try {
            $combinedDocs = 0;
            $company_id = Auth::guard('api')->user()->company_id;


            if ($request->name == 'Uploaded') {
                $inspectionTaskMaintenance = InspectionTaskMaintenanceDoc::where('listing_id', $id)->where('company_id', $company_id)
                    ->where('generated', null)
                    ->with('property')
                    ->get();

                // $billDoc = Bill::where('company_id', $company_id)
                //     ->where('maintenance_id', $id)
                //     ->where('doc_path', '!=', null)
                //     ->where('file', '!=', null)
                //     ->with('property')
                //     ->get();
                // $billDoc= null;
                // $allDocs = $inspectionTaskMaintenance
                // ->concat($billDoc);
                $allDocs = $inspectionTaskMaintenance;



                $sortedDocs = $allDocs->sortByDesc('created_at');
                $combinedDocs = $sortedDocs->map(function ($item) {
                    return $item->toArray();
                })->values()->toArray();
                // return $combinedDocs;
            } else {

                $inspectionTaskMaintenance = InspectionTaskMaintenanceDoc::where('listing_id', $id)->where('company_id', $company_id)->where('generated', '!=', null)->with([
                    'property' => function ($query) {
                        $query->addSelect('id', 'reference');
                    }
                ])->get();


                // $billDoc = Bill::where('maintenance_id', $id)->where('company_id', $company_id)
                //     ->where('doc_path', '!=', null)
                //     ->where('file', null)
                //     ->with('property')
                //     ->get();

                $billDoc = null;

                $allDocs = $inspectionTaskMaintenance
                    ->concat($billDoc);


                $sortedDocs = $allDocs->sortByDesc('created_at');
                $combinedDocs = $sortedDocs->map(function ($item) {
                    return $item->toArray();
                })->values()->toArray();
            }
            return response()->json([
                'data' => $combinedDocs,
                'message' => 'successfull'
            ], 200);
        } catch (\Throwable $th) {
            return response()->json([
                "status" => "error",
                "error" => ['error'],
                "message" => $th->getMessage(),
                "data" => []
            ], 500);
        }
    }
}
